const axios = require('axios');
const satellite = require('satellite.js');
const SpaceDebris = require('./SpaceDebris');

async function fetchDebrisTLEs() {
    // Login to Space-Track
    const loginData = {
        identity: process.env.SPACETRACK_USER,
        password: process.env.SPACETRACK_PASS
    };
    const jar = require('cookiejar').CookieJar();
    const axiosCookieJarSupport = require('axios-cookiejar-support').default;
    axiosCookieJarSupport(axios);
    
    await axios.post('https://www.space-track.org/ajaxauth/login', loginData, { jar, withCredentials: true });
    
    // Example: get debris objects (limit 50 for test)
    const res = await axios.get(
        'https://www.space-track.org/basicspacedata/query/class/tle_latest/OBJECT_TYPE/DEBRIS/ORDINAL/1/limit/50/format/tle',
        { jar, withCredentials: true }
    );

    return res.data.split('\n').filter(l => l.trim()); // TLE lines
}

function tleToGeo(tle1, tle2) {
    const satrec = satellite.twoline2satrec(tle1, tle2);
    const now = new Date();
    const positionAndVelocity = satellite.propagate(satrec, now);
    const gmst = satellite.gstime(now);

    const positionGd = satellite.eciToGeodetic(positionAndVelocity.position, gmst);
    const velocityEci = positionAndVelocity.velocity;

    const lat = satellite.degreesLat(positionGd.latitude);
    const lon = satellite.degreesLong(positionGd.longitude);
    const altKm = positionGd.height;
    const speedKms = Math.sqrt(
        velocityEci.x**2 + velocityEci.y**2 + velocityEci.z**2
    );
    const directionDeg = (Math.atan2(velocityEci.y, velocityEci.x) * 180 / Math.PI + 360) % 360;

    return { lat, lon, altKm, speedKms, directionDeg };
}

(async () => {
    const tleLines = await fetchDebrisTLEs();

    for (let i = 0; i < tleLines.length; i += 3) {
        const name = tleLines[i].trim();
        const line1 = tleLines[i+1];
        const line2 = tleLines[i+2];
        if (!line1 || !line2) continue;

        const geo = tleToGeo(line1, line2);
        const debris = new SpaceDebris()
            .noradCatId(parseInt(line1.slice(2, 7)))
            .objectName(name)
            .lat(geo.lat)
            .lon(geo.lon)
            .altKm(geo.altKm)
            .speedKms(geo.speedKms)
            .directionDeg(geo.directionDeg)
            .sizeCategory('UNKNOWN') // you can fetch RCS_SIZE from /gp instead of /tle
            .lastUpdated(new Date());

        await debris.createOrUpdate();
    }

    console.log("Debris data updated.");
})();
